{
	"info": {
		"_postman_id": "3429ab6d-dd3f-4ed0-b023-73ed031bc577",
		"name": "StudentAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24187844"
	},
	"item": [
		{
			"name": "Get Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data type of response\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");",
							"    pm.expect(jsonData.id).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Test array properties\", () => {",
							"\tpm.expect(jsonData.courses).to.include(\"Java\");",
							"\tpm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);",
							"});",
							"",
							"pm.test(\"values of fields in repsonse\", () => {",
							"\tvar jsonData = pm.response.json();",
							"\tpm.expect(jsonData.id).to.eql(\"1\");",
							"\tpm.expect(jsonData.name).to.eql(\"John\");",
							"\tpm.expect(jsonData.location).to.eql(\"India\");",
							"\tpm.expect(jsonData.phone).to.eql(\"1234567890\");",
							"\tpm.expect(jsonData.courses[0]).to.eql(\"Java\");",
							"\tpm.expect(jsonData.courses[1]).to.eql(\"Selenium\");",
							"});",
							"",
							"var schema=",
							"{",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"title\": \"Generated schema for Root\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"location\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"phone\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"courses\": {",
							"      \"type\": \"array\",",
							"      \"items\": {",
							"        \"type\": \"string\"",
							"      }",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"location\",",
							"    \"phone\",",
							"    \"courses\"",
							"  ]",
							"}",
							"",
							"pm.test('Schema is valid', ()=> {",
							" pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:3000/students/1"
			},
			"response": []
		},
		{
			"name": "Get All Student Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => {\r",
							"\tpm.expect(jsonData.courses).to.include(\"Java\");\r",
							"\tpm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"values of fields in repsonse\", () => {\r",
							"\tvar jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.id).to.eql(\"1\");\r",
							"\tpm.expect(jsonData.name).to.eql(\"John\");\r",
							"\tpm.expect(jsonData.location).to.eql(\"India\");\r",
							"\tpm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"\tpm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"\tpm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"var schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', ()=> {\r",
							" pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Create New Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => {\r",
							"\tpm.expect(jsonData.courses).to.include(\"Java\");\r",
							"\tpm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"values of fields in repsonse\", () => {\r",
							"\tvar jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.id).to.eql(\"1\");\r",
							"\tpm.expect(jsonData.name).to.eql(\"John\");\r",
							"\tpm.expect(jsonData.location).to.eql(\"India\");\r",
							"\tpm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"\tpm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"\tpm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"var schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', ()=> {\r",
							" pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Britney\",\r\n    \"location\": \"Belgium\",\r\n    \"phone\": \"3213455\",\r\n    \"courses\": [\r\n        \"JavaScript\",\r\n        \"C++\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/students"
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => {\r",
							"\tpm.expect(jsonData.courses).to.include(\"Java\");\r",
							"\tpm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"values of fields in repsonse\", () => {\r",
							"\tvar jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.id).to.eql(\"1\");\r",
							"\tpm.expect(jsonData.name).to.eql(\"John\");\r",
							"\tpm.expect(jsonData.location).to.eql(\"India\");\r",
							"\tpm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"\tpm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"\tpm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"var schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', ()=> {\r",
							" pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\": \"e184\",\r\n        \"name\": \"Scott\",\r\n        \"location\": \"Germany\",\r\n        \"phone\": \"123435466\",\r\n        \"courses\": [\r\n        \"C#\",\r\n        \"C++\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3000/students/e184"
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => {\r",
							"\tpm.expect(jsonData.courses).to.include(\"Java\");\r",
							"\tpm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"values of fields in repsonse\", () => {\r",
							"\tvar jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.id).to.eql(\"1\");\r",
							"\tpm.expect(jsonData.name).to.eql(\"John\");\r",
							"\tpm.expect(jsonData.location).to.eql(\"India\");\r",
							"\tpm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
							"\tpm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"\tpm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"var schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', ()=> {\r",
							" pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:3000/students/e184"
			},
			"response": []
		}
	]
}